{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Presentaci\u00f3n alumno","text":"Adri\u00e1n Velasco Carrasco 2\u00ba Desarrollo de Aplicaciones Web"},{"location":"PRACTICA_2_1/","title":"Pr\u00e1ctica 2.1 - Instalaci\u00f3n y configuraci\u00f3n de un servidor web Nginx","text":""},{"location":"PRACTICA_2_1/#instalacion","title":"Instalaci\u00f3n","text":"<p>Para instalar el servidor de nginx en nuestra Debian debemos de realizar los siguientes comandos:  <code>sudo apt update</code> <code>sudo apt install nginx</code></p> <p></p> <p>Y comprobamos que se ha instalado y que est\u00e1 funcionando correcamente:  <code>systemctl status nginx</code></p> <p></p>"},{"location":"PRACTICA_2_1/#creacion-de-las-carpetas-del-sitio-web","title":"Creaci\u00f3n de las carpetas del sitio web","text":"<p>Vamos a crear nuestra carpeta para nuestro sitio web dentro de /var/www ya que t\u00edpicamente, estas carpetas almacenan los sitios. Para crearla haremos uso del comando: <code>sudo mkdir -p /var/www/adridevelop/html</code></p> <p></p> <p>Para el siguiente paso, deberemos de instalar git en Debian. Para ello realizamos lo siguiente. </p> <p>Y dentro de esta carpeta, debemos clonar el repositorio: <code>https://github.com/cloudacademy/static-website-example</code></p> <p></p> <p>Ahora, haremos que el usuario www-data sea el propietario mediante el comando <code>sudo chown -R www-data:www-data /var/www/adridevelop/html</code>.</p> <p></p> <p>A continuaci\u00f3n, daremos los permisos necesarios para no tener errores en el acceso al sitio web usando el comando <code>sudo chmod -R 755 /var/www/adridevelop</code></p> <p></p> <p>Y comprobaremos que est\u00e1 funcionando desde nuestra m\u00e1quina local escribiendo en la barra de b\u00fasqueda la ip de nuestro servidor.</p> <p></p>"},{"location":"PRACTICA_2_1/#configuracion-de-servidor-web-nginx","title":"Configuraci\u00f3n de servidor web NGINX","text":"<p>Para que podamos presentar contenido en nuestra webm deberemos de crear un bloque de servidor con directivas correctas. Para ello, crearemos un nuevo archivo de configuraci\u00f3n. Iremos a nuestra terminal y crearemos nuestro archivo de configuraci\u00f3n mediante <code>sudo nano /etc/nginx/sites-available/vuestro_dominio</code>.</p> <p></p> <p>Y dentro de este archivo que hemos creado, generaremos lo siguiente:</p> <pre><code>server {\n        listen 80;\n        listen [::]:80;\n        root /ruta/absoluta/archivo/index;\n        index index.html index.htm index.nginx-debian.html;\n        server_name nombre_web;\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n</code></pre> <p></p> <p>Tambi\u00e9n, deberemos de crear un archivo simb\u00f3lico entre este archivo y el de los sitios que est\u00e1n habilitados. Para ello <code>sudo ln -s /etc/nginx/sites-available/nombre_web /etc/nginx/sites-enabled/</code></p> <p></p> <p>Y reiniciaremos el servidor. <code>sudo systemctl restart nginx</code></p> <p></p>"},{"location":"PRACTICA_2_1/#comprobaciones","title":"Comprobaciones","text":"<p>Para comprobar que nuestro host est\u00e1 funcionando, deberemos de acceder dentro de nuestra m\u00e1quina cliente a /etc/host y a\u00f1adiremos nuestro servidor nginx.</p> <p></p> <p>Y deberemos tambi\u00e9n comprobar que, las peticiones se est\u00e1n registrando correctamente en los archivos de logs, tanto las correctas como las err\u00f3neas.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"PRACTICA_2_1/#ftp","title":"FTP","text":"<p>Para configurar SFTP en Debian deberemos de instalar antes vsftpd, para ello, haremos uso de <code>sudo apt-get install vsftpd</code></p> <p></p> <p>Tras eso, crearemos una carpeta en nuestro home de Debian llamada ftp. <code>mkdir /home/adrian-alumno/ftp</code></p> <p></p> <p>Tras eso, deberemos de crear los certificados de seguridad necesarios mediante <code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem</code></p> <p></p> <p>Y una vez realizados estos pasos, deberemos de editar el documento /etc/vsftpd.conf de la siguiente manera: <code>sudo nano /etc/vsftpd.conf</code></p> <p></p> <p>Y guardaremos los cambios y reiniciaremos el servidor. <code>sudo systemctl restart -now vsftpd</code></p> <p></p> <p>Tras esta configuraci\u00f3n, instalaremos FileZilla y haremos una operaci\u00f3n ftp a nuestro servidor. Para ello, deberemos de poner nuestra ip, nombre de usuario, contrase\u00f1a y puerto para que podamos realizar la conexi\u00f3n. </p> <p></p> <p>Tras haber realizado la conexi\u00f3n correctamente, debemos pasar un archivo para comprobar que funciona, en mi caso, una foto.</p> <p></p> <p></p>"},{"location":"PRACTICA_2_1/#https","title":"HTTPS","text":"<p>Deberemos de instalar openssl para que podamos acceder a nuestro sitio a trav\u00e9s de https.</p> <p></p> <p>Ahora, crearemos nuestro certificado.</p> <p></p> <p>Y tras eso, almacenaremos la configuraci\u00f3n.</p> <p></p> <p>Y agregaremos el cerficado y las nuevas rutas a nuestro fichero.</p> <p></p> <p>Y en nuestro host, a\u00f1adiremos en nuestra ip, las direcciones a\u00f1adidas anteriormente.</p> <p></p> <p>Y buscamos en nuestro navegador nuestro sitio web.</p> <p></p> <p></p>"},{"location":"PRACTICA_2_2/","title":"Pr\u00e1ctica 2.2 - Autenticaci\u00f3n en Nginx","text":""},{"location":"PRACTICA_2_2/#creacion-de-usuarios-y-contrasenas-para-el-acceso-web","title":"Creaci\u00f3n de usuarios y contrase\u00f1as para el acceso web.","text":"<p>Lo que haremos en este paso ser\u00e1 crear un archivo oculto .htpasswd en el directorio de configuraci\u00f3n. Para ello, usaremos el siguiente comando.</p> <p>Y despu\u00e9s, crearemos un cifrado para el usuario.</p>"},{"location":"PRACTICA_2_2/#tarea-","title":"TAREA .-","text":"<p>Crear dos usuarios, uno con tu nombre y otro con tu primer apellido.</p> <p>Comprueba que el usuario y la contrase\u00f1a aparecen cifrados en el fichero .htpasswd</p>"},{"location":"PRACTICA_2_2/#configurando-el-servidor-nginx-para-usar-autenticacion-basica","title":"Configurando el servidor Nginx para usar autenticaci\u00f3n b\u00e1sica.","text":"<p>Debemos de editar nuestro archivo de configuraci\u00f3n para a\u00f1adir la configuracion para que nginx utilice el fichero que previamente hemos creado.</p> <p>Y una vez finalicemos, reiniciaremos nuestro servicio.</p>"},{"location":"PRACTICA_2_2/#probando-la-nueva-configuracion","title":"Probando la nueva configuraci\u00f3n.","text":""},{"location":"PRACTICA_2_2/#tarea-_1","title":"TAREA.-","text":"<p>Intentamos iniciar con un usuario erroneo y luego con uno correcto. </p> <p>Adjuntar captura de pantalla de los logs.</p>"},{"location":"PRACTICA_2_2/#tarea-_2","title":"TAREA.-","text":"<p>Borra las dos l\u00f1ineas que hacen referencia a la autenticaci\u00f3n b\u00e1sica en el location del directorio ra\u00edz. Tras ello, a\u00f1ade el nuevo location dentro con la autenticaci\u00f3n b\u00e1sica para el archivo/secci\u00f3n contact.html \u00fanicamente.</p>"},{"location":"PRACTICA_2_2/#comprobacion-de-autenticacion-basica-con-la-restriccion-de-acceso-por-ip","title":"Comprobaci\u00f3n de autenticaci\u00f3n b\u00e1sica con la restricci\u00f3n de acceso por IP.","text":"<p>En este paso, permitiremos y denegaremos el acceso a la ip de nuestra m\u00e1quina. Para ello debemos de a\u00f1adir en nuestro archivo de configuraci\u00f3n lo siguiente.</p>"},{"location":"PRACTICA_2_2/#tarea-_3","title":"TAREA.-","text":"<p>Configura Nginx para que no deje acceder con la IP de la m\u00e1quina anfitriona al directorio ra\u00edz de una de tus dos webs. Comprueba que se deniega el acceso:</p> <p>Muestra p\u00e1gina de error en el navegador.</p> <p>Muestra el mensaje de error de error.log.</p>"},{"location":"PRACTICA_2_2/#tarea-_4","title":"TAREA.-","text":"<p>Configura Nginx para que desde tu m\u00e1quina anfitriona se tenga que tener tanto una IP v\u00e1lida como un usuario v\u00e1lido, ambas cosas a la vez, y comprueba que si puede acceder sin problemas.</p>"},{"location":"PRACTICA_2_2/#respuesta-a-las-cuestiones","title":"Respuesta a las cuestiones.","text":""}]}