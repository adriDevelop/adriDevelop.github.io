{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Presentaci\u00f3n alumno","text":"Adri\u00e1n Velasco Carrasco 2\u00ba Desarrollo de Aplicaciones Web"},{"location":"PRACTICA_2_1/","title":"Pr\u00e1ctica 2.1 - Instalaci\u00f3n y configuraci\u00f3n de un servidor web Nginx","text":""},{"location":"PRACTICA_2_1/#instalacion","title":"Instalaci\u00f3n","text":"<p>Para instalar el servidor de nginx en nuestra Debian debemos de realizar los siguientes comandos:  <code>sudo apt update</code> <code>sudo apt install nginx</code></p> <p></p> <p>Y comprobamos que se ha instalado y que est\u00e1 funcionando correcamente:  <code>systemctl status nginx</code></p> <p></p>"},{"location":"PRACTICA_2_1/#creacion-de-las-carpetas-del-sitio-web","title":"Creaci\u00f3n de las carpetas del sitio web","text":"<p>Vamos a crear nuestra carpeta para nuestro sitio web dentro de /var/www ya que t\u00edpicamente, estas carpetas almacenan los sitios. Para crearla haremos uso del comando: <code>sudo mkdir -p /var/www/adridevelop/html</code></p> <p></p> <p>Para el siguiente paso, deberemos de instalar git en Debian. Para ello realizamos lo siguiente. </p> <p>Y dentro de esta carpeta, debemos clonar el repositorio: <code>https://github.com/cloudacademy/static-website-example</code></p> <p></p> <p>Ahora, haremos que el usuario www-data sea el propietario mediante el comando <code>sudo chown -R www-data:www-data /var/www/adridevelop/html</code>.</p> <p></p> <p>A continuaci\u00f3n, daremos los permisos necesarios para no tener errores en el acceso al sitio web usando el comando <code>sudo chmod -R 755 /var/www/adridevelop</code></p> <p></p> <p>Y comprobaremos que est\u00e1 funcionando desde nuestra m\u00e1quina local escribiendo en la barra de b\u00fasqueda la ip de nuestro servidor.</p> <p></p>"},{"location":"PRACTICA_2_1/#configuracion-de-servidor-web-nginx","title":"Configuraci\u00f3n de servidor web NGINX","text":"<p>Para que podamos presentar contenido en nuestra webm deberemos de crear un bloque de servidor con directivas correctas. Para ello, crearemos un nuevo archivo de configuraci\u00f3n. Iremos a nuestra terminal y crearemos nuestro archivo de configuraci\u00f3n mediante <code>sudo nano /etc/nginx/sites-available/vuestro_dominio</code>.</p> <p></p> <p>Y dentro de este archivo que hemos creado, generaremos lo siguiente:</p> <pre><code>server {\n        listen 80;\n        listen [::]:80;\n        root /ruta/absoluta/archivo/index;\n        index index.html index.htm index.nginx-debian.html;\n        server_name nombre_web;\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n</code></pre> <p></p> <p>Tambi\u00e9n, deberemos de crear un archivo simb\u00f3lico entre este archivo y el de los sitios que est\u00e1n habilitados. Para ello <code>sudo ln -s /etc/nginx/sites-available/nombre_web /etc/nginx/sites-enabled/</code></p> <p></p> <p>Y reiniciaremos el servidor. <code>sudo systemctl restart nginx</code></p> <p></p>"},{"location":"PRACTICA_2_1/#comprobaciones","title":"Comprobaciones","text":"<p>Para comprobar que nuestro host est\u00e1 funcionando, deberemos de acceder dentro de nuestra m\u00e1quina cliente a /etc/host y a\u00f1adiremos nuestro servidor nginx.</p> <p></p> <p>Y deberemos tambi\u00e9n comprobar que, las peticiones se est\u00e1n registrando correctamente en los archivos de logs, tanto las correctas como las err\u00f3neas.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"PRACTICA_2_1/#ftp","title":"FTP","text":"<p>Para configurar SFTP en Debian deberemos de instalar antes vsftpd, para ello, haremos uso de <code>sudo apt-get install vsftpd</code></p> <p></p> <p>Tras eso, crearemos una carpeta en nuestro home de Debian llamada ftp. <code>mkdir /home/adrian-alumno/ftp</code></p> <p></p> <p>Tras eso, deberemos de crear los certificados de seguridad necesarios mediante <code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem</code></p> <p></p> <p>Y una vez realizados estos pasos, deberemos de editar el documento /etc/vsftpd.conf de la siguiente manera: <code>sudo nano /etc/vsftpd.conf</code></p> <p></p> <p>Y guardaremos los cambios y reiniciaremos el servidor. <code>sudo systemctl restart -now vsftpd</code></p> <p></p> <p>Tras esta configuraci\u00f3n, instalaremos FileZilla y haremos una operaci\u00f3n ftp a nuestro servidor. Para ello, deberemos de poner nuestra ip, nombre de usuario, contrase\u00f1a y puerto para que podamos realizar la conexi\u00f3n. </p> <p></p> <p>Tras haber realizado la conexi\u00f3n correctamente, debemos pasar un archivo para comprobar que funciona, en mi caso, una foto.</p> <p></p> <p></p>"},{"location":"PRACTICA_2_1/#https","title":"HTTPS","text":"<p>Deberemos de instalar openssl para que podamos acceder a nuestro sitio a trav\u00e9s de https.</p> <p></p> <p>Ahora, crearemos nuestro certificado.</p> <p></p> <p>Y tras eso, almacenaremos la configuraci\u00f3n.</p> <p></p> <p>Y agregaremos el cerficado y las nuevas rutas a nuestro fichero.</p> <p></p> <p>Y en nuestro host, a\u00f1adiremos en nuestra ip, las direcciones a\u00f1adidas anteriormente.</p> <p></p> <p>Y buscamos en nuestro navegador nuestro sitio web.</p> <p></p> <p></p>"},{"location":"PRACTICA_2_2/","title":"Pr\u00e1ctica 2.2 - Autenticaci\u00f3n en Nginx","text":""},{"location":"PRACTICA_2_2/#creacion-de-usuarios-y-contrasenas-para-el-acceso-web","title":"Creaci\u00f3n de usuarios y contrase\u00f1as para el acceso web.","text":"<p>Lo que haremos en este paso ser\u00e1 crear un archivo oculto .htpasswd en el directorio de configuraci\u00f3n donde guardaremos nuestros usuarios y contrase\u00f1as para el acceso a la web. Para ello, usaremos el siguiente comando.</p> <p></p> <p>Y despu\u00e9s, crearemos una contrase\u00f1a que cifrar\u00e1 al usuario.</p> <p></p>"},{"location":"PRACTICA_2_2/#tarea-","title":"TAREA .-","text":"<p>Crear dos usuarios, uno con tu nombre y otro con tu primer apellido.</p> <p></p> <p>Comprueba que el usuario y la contrase\u00f1a aparecen cifrados en el fichero .htpasswd</p> <p></p>"},{"location":"PRACTICA_2_2/#configurando-el-servidor-nginx-para-usar-autenticacion-basica","title":"Configurando el servidor Nginx para usar autenticaci\u00f3n b\u00e1sica.","text":"<p>Debemos de editar nuestro archivo de configuraci\u00f3n para a\u00f1adir la configuraci\u00f3n para que nginx utilice el fichero que previamente hemos creado y podamos as\u00ed usarlo en nuestra p\u00e1gina para que pida el acceso de usuario.</p> <p></p> <p>Y una vez finalicemos, reiniciaremos nuestro servicio nginx.</p> <p></p>"},{"location":"PRACTICA_2_2/#probando-la-nueva-configuracion","title":"Probando la nueva configuraci\u00f3n.","text":""},{"location":"PRACTICA_2_2/#tarea-_1","title":"TAREA.-","text":"<p>Intentamos iniciar con un usuario. </p>"},{"location":"PRACTICA_2_2/#tarea-_2","title":"TAREA.-","text":"<p>Borra las dos l\u00edneas que hacen referencia a la autenticaci\u00f3n b\u00e1sica en el location del directorio ra\u00edz. Tras ello, a\u00f1ade el nuevo location dentro con la autenticaci\u00f3n b\u00e1sica para el archivo/secci\u00f3n contact.html \u00fanicamente.</p> <p></p> <p>Para ello, como no podemos hacer uso de #contact debemos de crearnos un contact.html a parte con el contenido de #contact en nuestro directorio del proyecto para que podamos hacer referencia a \u00e9l desde el archivo de configuraci\u00f3n.  Una vez lo tengamos creado, con todo el contenido, debemos de a\u00f1adir la configuraci\u00f3n para que nuestro sistema pida la autenticaci\u00f3n de usuario cuando se quiera acceder a esa p\u00e1gina y no nos dejar\u00e1 acceder nada m\u00e1s que a contact.</p> <p></p>"},{"location":"PRACTICA_2_2/#comprobacion-de-autenticacion-basica-con-la-restriccion-de-acceso-por-ip","title":"Comprobaci\u00f3n de autenticaci\u00f3n b\u00e1sica con la restricci\u00f3n de acceso por IP.","text":"<p>En este paso, permitiremos y denegaremos el acceso a la ip de nuestra m\u00e1quina. Para ello debemos de a\u00f1adir en nuestro archivo de configuraci\u00f3n lo siguiente.</p>"},{"location":"PRACTICA_2_2/#tarea-_3","title":"TAREA.-","text":"<p>Configura Nginx para que no deje acceder con la IP de la m\u00e1quina anfitriona al directorio ra\u00edz de una de tus dos webs. Comprueba que se deniega el acceso:</p> <p></p> <p>Muestra p\u00e1gina de error en el navegador.</p> <p></p> <p>Muestra el mensaje de error de error.log.</p> <p></p>"},{"location":"PRACTICA_2_2/#tarea-_4","title":"TAREA.-","text":"<p>Configura Nginx para que desde tu m\u00e1quina anfitriona se tenga que tener tanto una IP v\u00e1lida como un usuario v\u00e1lido, ambas cosas a la vez, y comprueba que si puede acceder sin problemas.</p> <p></p>"},{"location":"PRACTICA_2_3/","title":"Practica 2.3: Proxy inverso con Nginx.","text":"<p>Para esta practica, deberemos de clonar antes de nada nuestra maquina principal para crear la proxy, teniendo la precaucion de que al clonarla, tenemos que cambiarle la direccion mac a esa maquina para que no haya conflictos en la red ya que tendrian la misma ip.</p> <p></p> <p>Una vez hecho esto, deberemos de irnos a nuestro proxy y cambiar el nombre que tuvieramos de nuestra web por el de webserver en todas las coincidencias, tanto nombre de archivo como en la configuracion.</p> <p>Tambien deberemnos de agregar en el archivo hosts de nuestro proxy y de nuestra maquina virtual las ip de nuestro webserver y de nuestro proxy.</p> <p></p> <p></p> <p>Y tras esto deberemos de eliminar el enlace simbolico que habia con nuestro archivo y hacerlo con el nuevo.</p> <p></p> <p></p> <p>Ya terminado con esto, procederemos ahora a reiniciar el servicio de nginx.</p>"},{"location":"PRACTICA_2_3/#nginx-proxy-inverso","title":"Nginx proxy inverso","text":"<p>Deberemos de crearnos en nuestro proxy inverso un archivo con el nombre ejemplo-proxy. Este archivo tendra lo siguiente:</p> <p></p> <p>Deberemos de hacer las comprobaciones a\u00f1adiendo las cabeceras para que, cuando nuestro proxy escuche y redireccione a webserver, se manden las dos cabeceras, la del proxy y la del webserver.</p> <p>Para ello, deberemos de a\u00f1adir la siguiente linea a nuestro archivo de configuracion.</p> <p><code>add_header Host nombre_del_host;</code></p> <p>Obviamente, cuando hagamos esto, deberemos de reiniciar nuestro servicio de nginx. Y una vez reiniciado, realizaremos las comprobaciones.</p> <p></p>"},{"location":"PRACTICA_2_4/","title":"Practica 2.4 - Balanceo de Carga con Proxy inverso Nginx.","text":"<p>Lo primero que deberemos de hacer sera crear nuestra copia de nuestra maquina virtual, teniendo asi 2 maquinas con servidores web distintos y un proxy reutilizado de la practica anterior. Este servira para que realice el balanceo de carga entre los dos servidores web.</p>"},{"location":"PRACTICA_2_4/#configuracion-del-nuevo-webserver2","title":"Configuracion del nuevo webserver2.","text":""},{"location":"PRACTICA_2_4/#unlink-webserver-clonado","title":"Unlink webserver clonado.","text":"<p>Hacemos unlink del webserver que teniamos configurado de la maquina que ha sido clonada y configuramos el nuevo webserver. </p>"},{"location":"PRACTICA_2_4/#ningx-proxy-inverso","title":"Ningx proxy inverso.","text":"<p>Tras esto, deberemos modificar tambien el archivo webserver, ya que la configuracion es de la maquina anterior. </p> <p></p>"},{"location":"PRACTICA_2_4/#nginx-servidor-webserver","title":"Nginx servidor webserver.","text":"<p>Deberemos de configurar la maquina proxy escuche a la maquina clonada (webserver2), como hicimos en la anterior practica con la maquina clonada(webserver1), y le agregaremos la cabecera para este webserver(webserver2) y se creara un bloque upstring que lo que hara sera englobar a los dos servidores webserver para que cuando haya sobrecarga, pueda redirigir a webserver1 o a webserver2.</p>"},{"location":"PRACTICA_2_4/#configuracion-archivo-ejemplo-proxy-de-la-maquina-proxy","title":"Configuracion archivo ejemplo-proxy de la maquina proxy.","text":""},{"location":"PRACTICA_2_4/#configuracion-archivo-etchosts-de-la-maquina-local","title":"Configuracion archivo /etc/hosts de la maquina local.","text":""},{"location":"PRACTICA_2_4/#comprobaciones","title":"Comprobaciones.","text":"<p>Comprobamos que cuando la maquina webserver1 este caida(o apagada) o sobrecargada, se redirija a la maquina webserver2, comprobandolo mediante el header que envia la pagina. </p> <p>Y despues hacemos lo correspondiente con la otra maquina. </p>"},{"location":"PRACTICA_2_5/","title":"Practica 2.5 - Proxy inverso y balanceo de carga con SSL en NGINX","text":"<p>En esta practica agregaremos la configuracion SSL para cifrado ssl en nuestro Proxy inverso.</p>"},{"location":"PRACTICA_2_5/#creacion-de-nuestro-certificado-autofirmado","title":"Creacion de nuestro certificado autofirmado.","text":"<p>Haremos uso de nuestro certificado autofirmado ya que como no tenemos desplegada nuestra web  y los certificados son de pago, pues lo haremos de forma autofirmada.</p> <p>Lo que deberiamos de hacer, para crear nuestros certificados seria:   - Irnos a la maquina proxy.   - Crear un directorio en el que guardaremos nuestros certificados.   - Y crear los certificados.</p>"},{"location":"PRACTICA_2_5/#como-creamos-el-directorio-para-nuestros-certificados","title":"Como creamos el directorio para nuestros certificados?","text":""},{"location":"PRACTICA_2_5/#como-creamos-nuestros-certificados","title":"Como creamos nuestros certificados?","text":"<p>Deberemos de crear nuestro certificado de la siguiente forma, cambiando la direccion que yo uso para guardar los certificados por la que se vaya a usar en otro caso.  Tras agregar esa linea de comando nos pedira la configuracion para nuestro certificado. En la practica ponia una configuracion pero yo he agregado una personal en vez de poner 2DAW.</p>"},{"location":"PRACTICA_2_5/#configuracion-del-proxy-inverso-para-aceptacion-de-certificados-autofirmados","title":"Configuracion del proxy inverso para aceptacion de certificados autofirmados.","text":"<p>Tras esto, ya tendiramos nuestras claves en el archivo indicado. Ahora, debemos de configurar nuestro proxy-inverso. Para ello deberemos de realizar lo siguiente:   - Editar nuestro archivo proyxy-inverso.   - Hacer un unlink de este en la carpeta sites-enabled.   - Agregar la configuracion para que agregue la aceptacion de los certificados en el sites-enabled.</p>"},{"location":"PRACTICA_2_5/#como-debemos-de-editar-nuestro-archivo-de-proxy-inverso","title":"Como debemos de editar nuestro archivo de proxy-inverso?","text":""},{"location":"PRACTICA_2_5/#como-hacemos-el-unlink-de-nuestro-archivo-proxy-inverso","title":"Como hacemos el unlink de nuestro archivo proxy-inverso?","text":"<p>Mediante el comando sudo unlink nombre-ejemplo-proxy IMPORTANTE dentro de nuestra carpeta sites-enables ya que sino, se nos borraria la configuracion de nuestro proxy-inverso de la carpeta sites-availabe si hacemos el comando desde ese directorio.</p>"},{"location":"PRACTICA_2_5/#como-agregamos-la-nueva-configuracion-a-sites-enabled","title":"Como agregamos la nueva configuracion a sites-enabled?","text":"<p>Mediante el comando sudo ln -s /etc/nginx/sites-available/nombre-ejemplo-proxy /etc/nginx/sites-enabled</p>"},{"location":"PRACTICA_2_5/#comprobaciones","title":"Comprobaciones.","text":"<p>Las comprobaciones las deberemos hacer desde un navegador externo, en el cual accederemos a nuestro ejemplo-proxy.com. Pero tenemos que tener una maquina webserver corriendo, sino, no nos redijira a ninguna parte. </p> <p>Cuando estemos dentro, clickaremos en Aceptar el riesgo y continuar y nos aparecera la redireccion correctamente. Pero aqui lo importante es ver si los certificados estan correctamente asi que accederemos al candado que tenemos en la parte superior al lado de la barra de busqueda de nuestro navegador.  </p> <p>Y nos aparecera esta configuracion. Deberemos de acceder a la parte de ver certificado y ahi, nos aparecera toda la configuracion junto con las claves.  </p>"},{"location":"PRACTICA_3_1/","title":"Pr\u00e1ctica 3.1: Instalaci\u00f3n de Tomcat y Maven para el despliegue de una aplicaci\u00f3n Java.","text":"<p>Esta pr\u00e1ctica consiste en realizar la instalaci\u00f1on del servidor Tomcat en una m\u00e1quina nueva. As\u00ed que, lo primero que haremos, ser\u00e1 crear una m\u00e1quina nueva de debian.</p> <p>Una vez la tengamos, procederemos con la instalaci\u00f3n de Tomcat.</p>"},{"location":"PRACTICA_3_1/#instalacion-de-tomcat","title":"Instalaci\u00f3n de Tomcat","text":"<p>Para comenzar con la pr\u00e1ctica, nos har\u00e1 falta tener java instalado. Para ello, ejecutaremos el siguiente comando:</p> <p><code>sudo apt install defaulr-jre</code> </p> <p>Una vez instalado, instalaremos Tomcat. <code>sudo apt install tomcat10 tomcat10-admin</code></p> <p></p> <p>Y comprobaremos los puertos que tenemos disponibles mediante </p> <p><code>ss -ltn</code> </p>"},{"location":"PRACTICA_3_1/#anadir-usuarios-a-nuestro-tomcat","title":"A\u00f1adir usuarios a nuestro Tomcat.","text":"<p>Para poder manejar nuestro tomcat, deberemos de tener un usuario capaz de realizar las acciones. Para ello, vamos a crearnos un usuario desde el archivo donde se almacenan los usuarios de tomcat, editando el archivo de configuraci\u00f3n.</p> <p><code>sudo nano /etc/tomcat10/tomcat-users.xml</code> </p> <p>Una vez dentro, deberemos de a\u00f1adir la siguiente l\u00ednea de c\u00f3digo en el archivo. </p> <p>Reiniciamos nuestro servicio de Tomcat y comprobamos que se encuentre funcionando correctamente.</p> <p><code>sudo systemctl restart tomcat10</code> <code>sudo systemctl status tomcat10</code> </p> <p>Y accedemos a localhost:8080/manager/html y comprobaremos que nos pide el logueo del usuario con el nombre de usuario y su contrase\u00f1a. </p> <p>Y nos deber\u00eda de aparecer la siguiente pantalla.</p> <p></p> <p>Con esto, ya tendr\u00edamos Tomcat funcionando correctamente en nuestra m\u00e1quina. Podr\u00edamos comprobarlo accediendo al ejemplo que nos aparece en la p\u00e1gina.</p> <p></p> <p>Si queremos trabajar con otro .war, deberemos de a\u00f1adirlo. (El ejemplo de la documentaci\u00f3n de moodle no funcionaba, aqu\u00ed el error).</p> <p></p> <p>Entonces he decidido trabajaremos con otro .war que funcione correctamente el cual mostrar\u00e9 mas adelante en la pr\u00e1ctica. Ahora proceder\u00e9 con la instalaci\u00f3n de maven.</p>"},{"location":"PRACTICA_3_1/#instalacion-de-maven","title":"Instalaci\u00f3n de Maven","text":"<p>Deberemos de instalar maven para hacer los despliegues. Para ello haremos uso del siguiente comando.</p> <p><code>sudo apt install maven</code> </p> <p>Comprobaremos que se ha instalado correcramente mediante el comando</p> <p><code>mvn --v</code> </p> <p>Ahora deberemos de configurar un usuario para hacer uso de los scripts.</p> <p></p>"},{"location":"PRACTICA_3_1/#clonacion-del-repositorio-que-haremos-uso","title":"Clonaci\u00f3n del repositorio que haremos uso.","text":"<p>Ahora, como dije anteriormente, haremos uso de un .war externo. Para ello haremos la clonaci\u00f3n del repositorio del que haremos uso.</p> <p></p> <p>Antes de hacer el despliegue, deberemos de configurar el despliegue desde el pom.xml para que contenga la ruta a la que queremos desplegar la aplicaci\u00f3n.</p> <p></p> <p>Una vez configurado, accedemos dentro de la carpeta del directorio que hemos clonado y ejecutamos el comando</p> <p><code>mvn tomcat7:deploy</code> </p> <p>Y nos deber\u00e1 de mostrar la siguiente salida de que se ha realizado correctamente.</p> <p></p> <p>Y si accedemos a la p\u00e1gina de localhost:8080/manager/html, deberemos de ver la aplicaci\u00f3n desplegada.</p> <p></p> <p>Y ah\u00ed la tendr\u00edamos con nombre pipedrapapeltijeras que fue la ruta que especificamos cuando modificamos nuestro pom.xml.</p> <p>Ahora accederemos y haremos unas pruebas. B\u00e1sicamente es un piedra papel o tijeras en el que nosotros cogemos una opci\u00f3n y la m\u00e1quina coge otra y devuelve si ganas o pierdes y un contador.</p> <p></p>"},{"location":"PRACTICA_3_2/","title":"Practica 3-2. Instalacion de Node.js Express y test de la primera aplicaci\u00f3n.","text":"<p>Para empezar con esta pr\u00e1ctica, debemos de parar nuestro servicio de Tomcat ya que nos podr\u00eda ocasionar problemas. Para ello:</p> <p><code>sudo systemctl stop tomcat10</code> </p> <p>Una vez realizado, procedemos a instalar mediante el siguiente comando.</p> <p><code>sudo apt -y install nodejs npm</code></p> <p>Cuando lo tengamos instalado, deberemos de instalar tambien Express. Para ello haremos uso del siguiente comando:</p> <p><code>sudo npm install -g express</code> </p> <p>Ahora, una vez que hayamos terminado de instalar todo lo necesario, procedemos con el despliegue de nuestra apliaci\u00f3n.</p>"},{"location":"PRACTICA_3_2/#despliegue-de-aplicacion-de-manera-local","title":"Despliegue de aplicaci\u00f3n de manera local.","text":"<p>Empezaremos clonando nuestro repositorio, del cual haremos el despliegue.  <code>git clone https://github.com/MehedilslamRipon/Shopping-Cart-Application</code> </p> <p>Y accederemos a la carpeta.</p> <p><code>cd Shopping-Cart-Application</code></p> <p>Una vez dentro, debemos instalar las librer\u00edas necesarias para que nuestra aplicaci\u00f3n funcione correctamente.</p> <p><code>npm install</code></p> <p>Y haremos uso del siguiente comando para que no nos d\u00e9 el error sh: 1: nodemon: not found.</p> <p><code>npm install nodemon --save--dev</code> </p> <p>Y desplegamos nuestra aplicaci\u00f3n. </p> <p>Y hacemos la comprobaci\u00f3n de que accede correctamente. </p>"},{"location":"PRACTICA_3_2/#parte-dos-de-la-practica","title":"Parte dos de la pr\u00e1ctica.","text":"<p>Nos conectaremos mediante ssh desde nuestra m\u00e1quina local a la m\u00e1quina virtual de la pr\u00e1ctica.</p> <p></p> <p>Y nos generaremos una carpeta para nuestro proyecto y dentro nuestro html y un js con el contenido facilitado en la pr\u00e1ctica.</p> <p></p> <p></p> <p></p> <p></p> <p>Y creamos nuestra aplicacion Node.js con el comando <code>npm init</code> el cual nos crear\u00e1 nuestro package.json.</p> <p></p> <p>Y comprobamos que nuestra aplicaci\u00f3n funciona correctamente de manera local.</p> <p></p> <p></p>"},{"location":"PRACTICA_3_2/#despliegue-aplicacion-en-netlify","title":"Despliegue aplicaci\u00f3n en Netlify.","text":"<p>Para comenzar con nuestro despliegue, deberemos de clonar un nuevo repositorio en nuestra m\u00e1quina. </p> <p>Para ello, mediante ssh, haremos la clonaci\u00f3n de nuestro repositorio.</p> <p></p> <p>Accederemos al directorio del repositorio e instalaremos los modulos de netlify necesarios mediante </p> <p><code>npm install netlify-cli -g</code></p> <p></p> <p>Para poder continuar con la pr\u00e1ctica, deberemos de crearnos una cuenta en Netlify y generar un token.</p> <p>Para generar un token, deberemos de acceder a nuestro perfil y en Aplicaciones nos aparecer\u00e1 la opci\u00f3n de generar nuevo token.</p> <p></p> <p>Y seguriemos los pasos:</p> <p></p> <p>Tras eso, ya tendremos nuestro token y lo que deberemos de hacer una exportacion de nuestro token almacenandolo en una variable. Para ello haremos lo siguiente:</p> <p></p> <p>Con \u00e9l, ahora podremos hacer login en Netlify mediante el token y este comando.</p> <p></p> <p>Tras ello, podremos realizar el despliegue de nuestra aplicaci\u00f3n mediante el comando </p> <p><code>netlify deploy</code></p> <p>Generando uno nuevo. A\u00f1adiendole un Team. El nombre del sitio. Y a\u00f1adiendo como ruta de despliegue el ./build.</p> <p></p> <p>Tras esto, si cogemos la direccion http que nos muestra el resultado.</p> <p></p> <p>Despues de comprobar que todo est\u00e9 correcto, deberemos realizar el despliegue a produccion mediante:</p> <p><code>netlify deploy --prod</code></p> <p></p> <p>Y podremos verlo en nuestro apartado perfil de Netlify.</p>"},{"location":"PRACTICA_3_2/#despliegue-de-aplicacion-netlify-a-traves-de-github","title":"Despliegue de aplicaci\u00f3n Netlify a trav\u00e9s de Github.","text":"<p>Para ello, deberemos de eliminar el despliegue que hab\u00edamos creado anteriormente.</p> <p></p> <p>Y eliminar el repositorio que clonamos anteriormente en nuestra m\u00e1quina.</p> <p></p> <p>Tras esto, importaremos un .zip de un repositorio haciendo uso del siguiente comando.</p> <p></p> <p>Una vez realizado esto, crearemos una carpeta en la que almacenaremos todo el contenido de nuestro proyecto descomprimido. </p> <p>Primero, deberemos de realizar un <code>mkdir</code> para crearnos nuestro directorio donde almacenaremos el contenido.</p> <p>Tras ello, <code>unzip main.zip -d directorio_creado</code> para descomprimir el archivo .zip en el directorio creado.</p> <p></p> <p>Ahora, deberemos de acceder dentro de nuestro repositorio.</p> <p></p> <p>Y crearnoslo en nuestro repositorio personal de Github.</p> <p></p> <p>Una vez lo tengamos nos deber\u00eda de aparecer algo tal que as\u00ed en nuestro repositorio de github.</p> <p></p> <p>Ahora, para el despliegue de nuestra aplicaci\u00f3n desde un repositorio de github, deberemos de acceder a Netlify y desde el apartado sites, seleccionaremos importar desde git.</p> <p></p> <p>Nos pedir\u00e1 que accedamos a nuestro Github y seleccionemos el repositorio que queramos desplegar para instalar Netlify.</p> <p></p> <p>una vez selecciondado, nos llevar\u00e1 de nuevo a la p\u00e1gina de Netlify con nuestro repositorio.</p> <p></p> <p>Y pondremos la siguiente configuraci\u00f3n.</p> <p> </p> <p>Le daremos a desplegar y nos aparecer\u00e1 el despliegue de nuestra aplicaci\u00f3n.</p> <p></p> <p>Una vez el despliegue se haya realizado, aparecer\u00e1 lo siguiente:</p> <p></p> <p>Ahora, para comprobar que funciona, editaremos el archivo de texto plano robots.txt que se encuentra dentro de nuestro. Lo editaremos con un contenido personalizado.</p> <p></p> <p>Y haremos un comit de nuestros cambios a nuestro repositorio para que se hagan los despliegues de la aplicaci\u00f3n de manera autom\u00e1tica.</p> <p> </p> <p>Y lo podremos comprobar en nuestra p\u00e1gina personal de Netlify tras realizar el push.</p> <p></p> <p>Y tras ello, comprobarlo tambi\u00e9n a nuestro enlace de despliegue, al apartado del archivo robots.txt.</p> <p></p>"},{"location":"PRACTICA_AMPLIACION/","title":"Practica ampliaci\u00f3n: Configuraci\u00f3n de un servidor Nginx con Hosts Virtuales y directorios de usuario.","text":"<p>Para esta pr\u00e1ctica, he clonado una de las m\u00e1quinas de nginx anteriores que m\u00e1s limpia ten\u00eda y he comenzado con la configuraci\u00f3n.</p>"},{"location":"PRACTICA_AMPLIACION/#configuracion-de-la-maquina","title":"Configuraci\u00f3n de la m\u00e1quina.","text":"<p>Para comenzar, lo primero que debemos de hacer es conectarnos por ssh a nuestro servidor desde nuestra m\u00e1quina local. Podemos hacer uso del comando <code>ssh</code> para conectarnos a nuestro servidor: </p> <p>Cuando ya estemos conectados mediante ssh a nuestro servidor, crearemos nuestros usuarios necesarios para la practica. Para ello, he hecho uso de los siguientes comandos: </p> <p>Pero con esto, aun no tendr\u00edamos creados correctamente nuestros usuarios ya que les tenemos que agregar una contrase\u00f1a. Para ello, usamos los siguientes comandos: </p> <p>Ahora, una vez finalizada la creaci\u00f3n de usuarios, procederemos a generas las carpetas que contendr\u00e1n los archivos de los sitios web de cada usuario generado.</p> <p>Lo primero que deberemos hacer desde nuestra terminal conectada mediante ssh es acceder a los usuarios generados mediante el uso de <code>su nombreusuario</code>.</p> <p>Una vez iniciada la sesi\u00f3n, desde la ra\u00edz del usuario, procederemos a crear una carpeta llamada <code>public_html</code> la cual contendr\u00e1 los archivos del sitio web.</p> <p>Y una vez creada, cambiaremos los permisos de la carpeta. Para todo ello, hacemos uso de los siguientes comandos:</p>"},{"location":"PRACTICA_AMPLIACION/#para-usuarioprueba1","title":"Para usuarioPrueba1","text":""},{"location":"PRACTICA_AMPLIACION/#para-usuarioprueba2","title":"Para usuarioPrueba2","text":"<p>Ahora, dentro de cada carpeta public_html, crearemos los archivos index.html correspondientes a cada usuario. Para ello:</p>"},{"location":"PRACTICA_AMPLIACION/#para-usuarioprueba1_1","title":"Para usuarioPrueba1","text":""},{"location":"PRACTICA_AMPLIACION/#para-usuarioprueba2_1","title":"Para usuarioPrueba2","text":"<p>Una vez terminado los pasos anteriores, saldremos del usuario en el que nos encontremos y procederemos a trabajar, nuevamente, con nuestro servidor directamente.</p> <p>Los siguientes pasos a seguir ser\u00e1n los siguientes:</p>"},{"location":"PRACTICA_AMPLIACION/#generar-un-par-de-claves-una-para-cada-usuario","title":"Generar un par de claves, una para cada usuario.","text":"<p>Para ello haremos uso del siguiente comando:</p>"},{"location":"PRACTICA_AMPLIACION/#para-usuarioprueba1_2","title":"Para usuarioPrueba1","text":""},{"location":"PRACTICA_AMPLIACION/#para-usuarioprueba2_2","title":"Para usuarioPrueba2","text":""},{"location":"PRACTICA_AMPLIACION/#creacion-del-espacio-para-cada-uno-de-los-sitios-web-de-los-usuarios","title":"Creaci\u00f3n del espacio para cada uno de los sitios web de los usuarios.","text":"<p>Tendremos que crear en nuestro servidor nginx, en el apartado <code>sites available</code> el apartado para cada uno de los sitios de cada usuario. Para ello haremos uso de los siguientes comandos: </p> <p>Una vez generados, debemos de agregar a cada uno de los sitios una configuraci\u00f3n espec\u00edfica.  Aqu\u00ed tendr\u00edamos la configuraci\u00f3n de cada uno de los usuarios:</p>"},{"location":"PRACTICA_AMPLIACION/#para-usuarioprueba1_3","title":"Para usuarioPrueba1","text":""},{"location":"PRACTICA_AMPLIACION/#para-usuarioprueba2_3","title":"Para usuarioPrueba2","text":"<p>Una vez generados los archivos de configuraci\u00f3n, debemos de hacer el enlace simb\u00f3lico entre este archivo y el directorio <code>sites-enabled</code>.  Para ello usaremos el siguiente comando:</p>"},{"location":"PRACTICA_AMPLIACION/#para-usuarioprueba1_4","title":"Para usuarioPrueba1","text":"<p><code>sudo ln -s /etc/nginx/sites-available/usuarioPrueba1 /etc/nginx/sites-enabled</code></p>"},{"location":"PRACTICA_AMPLIACION/#para-usuarioprueba2_4","title":"Para usuarioPrueba2","text":"<p><code>sudo ln -s /etc/nginx/sites-available/usuarioPrueba2 /etc/nginx/sites-enabled</code></p> <p>Una vez realizado el enlace simb\u00f3lico, reiniciaremos nuestro servicio de nginx y procederemos a ingresar a los dos sitios en el documento <code>hosts</code> de nuestra m\u00e1quina local para hacer uso de estos. Para ello: <code>sudo nano /etc/hosts</code> </p> <p>Con esto realizado y con nuestro servidor nginx sin errores, podremos acceder a los dos sitios web generados.</p>"},{"location":"PRACTICA_AMPLIACION/#pruebas","title":"Pruebas.","text":""},{"location":"PRACTICA_AMPLIACION/#comprobacion-uso-https-con-certificado-autofirmado","title":"Comprobaci\u00f3n uso https con certificado autofirmado.","text":""},{"location":"PRACTICA_AMPLIACION/#comprobacion-funcionalidad-pagina","title":"Comprobaci\u00f3n funcionalidad p\u00e1gina.","text":""}]}